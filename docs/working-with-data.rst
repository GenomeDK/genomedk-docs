.. _working_with_data:

=================
Working with data
=================

Where to put your data
======================

On your laptop, all files reside on your local hard disk. However, on GenomeDK
that is not the case. To achieve high performance and accommodate the huge
amounts of data located on the cluster, data is saved on network file systems.

Each of these file systems have their own advantages and disadvantages. Thus,
you need to put your data on the right file system to utilize the cluster
optimally.

/home/<username>
    Your home folder is on a file system called NFS. This file system handles
    many small files well, but not big files. It's also rather slow to access
    this file system from many compute nodes at the same time and your home
    folder is limited to 100 GB.

    We do *not* recommend storing raw data files, temporary files or results on
    this file system. However, it's fine for small documents like notes,
    programs and your Conda installation.

/faststorage/home/<username>
    For big files we provide access to a fast, parallel file system called
    BeeGFS. We call this file system *faststorage*. This file system is ideal
    for large data files and intermediate data generated by your jobs. However,
    it will be much slower for small files. All users have their own home
    folder located at :file:`/faststorage/home/<username>`. There is no limit
    on the amount of data that can be stored in this folder, but the data can
    only be accessed by your user.

/faststorage/project/<project name>
    All projects get their own folder on fast storage. All files related to the
    project should be placed in this folder. Project folders have no quota and
    can be accessed by all members of the project.

.. warning::

    The 100 GB limit was introduced in 2019 for new users. Old users are
    encouraged to keep their home folders under 100 GB since this allows us to
    move them to much faster storage servers. If your home folder is less than
    100 GB and you want to be moved to the fast storage servers, get in touch.

How much space am I using?
==========================

You can use the :command:`space user` command to figure out how much storage
and compute you're using across your home folders and projects.

.. _mounting:

Accessing your files locally
============================

You can access your files on GenomeDK locally by a process called *mounting*.
Mounting the GenomeDK filesystem locally makes it possible to access and edit
your files as if they were located in a folder on your own harddrive.

Unfortunately, mounting over SSH does not work on Windows. If you're on Windows
you can use MobaXterm_ or one of the alternatives listed in
:ref:`copying_data`.

* On distros with the :program:`apt` package manager (Ubuntu, Mint etc.):

  .. code-block:: console

      [local]$ apt-get install sshfs

* On distros with the :program:`yum` package manager (Fedora, CentOS etc.):

  .. code-block:: console

      [local]$ yum install sshfs

* On macOS, download and install the *SSHFS* and *FUSE for macOS* packages
  from the `OSX FUSE`_ website.

Create a directory where the filesystem will be mounted:

.. code-block:: console

    [local]$ mkdir ~/GenomeDK

Now mount the filesystem by running this command:

.. code-block:: console

    [local]$ sshfs USERNAME@login.genome.au.dk:/home/USERNAME ~/GenomeDK \
        -o idmap=none -o uid=$(id -u),gid=$(id -g) \
        -o allow_other -o umask=077 -o follow_symlinks

Where *USERNAME* should be replaced with your GenomeDK username. You should
now be able to access your files on GenomeDK by going to the ``~/GenomeDK``
directory on your computer.

To unmount the directory, run:

.. code-block:: console

    [local]$ umount ~/GenomeDK

.. _OSX FUSE: https://osxfuse.github.io/
.. _MobaXterm: https://mobaxterm.mobatek.net/

.. _copying_data:

Copying data
============

.. admonition:: Closed zone...

    To copy data from the cluster, see :ref:`gdk-export`
    To copy data to the cluster, see :ref:`gdk-import`

From your own machine to/from the cluster
-----------------------------------------

If you :ref:`mounted <mounting>` GenomeDK on your computer, you can copy files
to and from the cluster by simple drag-and-drop. Otherwise you can use one of
the solutions listed here or one of these alternatives:

* Filezilla_ [Linux/macOS/Windows]
* Cyberduck_ [macOS]
* MobaXterm_ [Windows]
* WinSCP_ [Windows]

You may also use the command line.

To copy a single file from your computer to the cluster:

.. code-block:: console

    [local]$ scp myfile.txt login.genome.au.dk:path/to/destination/

On Windows, replace ``scp`` with ``scp.exe``.

To copy a single file from the cluster to your computer:

.. code-block:: console

    [local]$ scp login.genome.au.dk:/path/to/file .

If you want to copy an entire folder to/from the cluster you will want to use
:program:`rsync` instead. To copy a folder from your computer to the cluster:

.. code-block:: console

    [local]$ rsync -e ssh -avz /path/to/data user@login.genome.au.dk:data

Windows doesn't have :program:`rsync` installed, so you must resort to one of
the options listed above.

If you want to upload a folder, but also delete files that you deleted in the
source folder from the destination:

.. code-block:: console

    [local]$ rsync -e ssh -avz --delete /path/to/data user@login.genome.au.dk:data

If you want to download data from the cluster:

.. code-block:: console

    [local]$ rsync -e ssh -avz --delete /location/data user@login.genome.au.dk:data

You may want to add the ``--progress`` flag to all of these commands if you're
downloading/uploading large amounts of data.

.. _Filezilla: https://filezilla-project.org/
.. _Cyberduck: https://cyberduck.io/
.. _WinSCP: https://winscp.net/eng/index.php


From the Internet to the cluster
--------------------------------

You can use :program:`wget` to download data from the Internet to the cluster:

.. code-block:: console

    [fe1]$ wget -c --timeout=120 --waitretry=60 \
        --tries=10000 --retry-connrefused URL

Remember to replace ``URL`` with the thing you want to download.

When downloading large files you are encouraged to limit the progress output to
avoid stressing the system, *especially* when you're sending the progress
output to a file:

.. code-block:: console

    [fe1]$ wget -c --progress=giga:force --timeout=120 --waitretry=60 \
        --tries=10000 --retry-connrefused URL

Editing files
=============

If you :ref:`mounted <mounting>` GenomeDK on your computer, you can edit files
directly by just opening them with your prefered text editor on your computer.
Otherwise you can use one of the solutions listed here.

Nano, vim, emacs
----------------

With editors like :program:`nano`, :program:`vim` and :program:`emacs` you can
edit files directly on the cluster. The editor itself also runs on the cluster
and thus your editor settings etc. are conserved, even if you log in from
another computer. Also, these editors don't require a graphical user interface,
so you don't need X-forwarding or VNC.

The :program:`nano` editor is by far the simplest editor of three, but also the
least powerful. However, it's just fine for quickly editing scripts or looking
at output files. The documentation for :program:`nano` can be reached by
running the command:

.. code-block:: console

    [fe1]$ man nano

You can open :program:`nano` by running:

.. code-block:: console

    [fe1]$ nano name-of-file.txt

Likewise, `vim`_ and `emacs`_ are already installed on the cluster.
Documentation for each editor can be found on their respective websites.

.. _vim: https://www.vim.org/
.. _emacs: https://www.gnu.org/software/emacs/index.html


Gedit with X-forwarding
-----------------------

If you want a graphical user interface and a more familiar editing experience,
you may use the :program:`Gedit` editor with :ref:`X-forwarding <xforwarding>`.
Make sure that you are connected to the cluster with X-forwarding enabled. Then
run:

.. code-block:: console

    [fe1]$ gedit

This will open the :program:`Gedit` editor in a new window. Since the editor
runs on the frontend, you have access to all of your files on the cluster.

.. _collaborating:

Collaborating on data
=====================

Data sharing between users can only be accomplished through dedicated project
folders to which only certain users have access.

Run the following command to request a new project folder:

.. code-block:: console

    [fe1]$ gm-request-project -g <project name> -m <members>

where **project name** is the desired name of the new project and **members**
is a comma-separated list of usernames of users that should be given access to
the project. For example, to request a project called *MyAwesomeProject* with
two additional members, *das* and *aeh*, run:

.. code-block:: console

    [fe1]$ gm-request-project -g MyAwesomeProject -m das,aeh

When your request has been accepted, you and the other project members will
have access to a shared folder in :file:`/project/<project name>` where
*project name* is the name requested for your project.

.. note::

    Don't know the username of one of your collaborators? You can use the
    :command:`finger` command to get information about any user on GenomeDK:

    .. code-block:: console

        [fe1]$ finger <name, username or mail>

    For example, to find all users with "anders" in their name:

    .. code-block:: console

        [fe1]$ finger anders
        aeh             Anders Egerup Halager <aeh@birc.au.dk>
        anders          Anders Boerglum <anders@biomed.au.dk>
        ...

Being a project owner
---------------------

When you request a project you're officially the project owner. This means that
you're responsible for the compute and storage used by the project. To help you
keep up to date on how much compute and storage is used by your projects, you
can use the :command:`space` command.

:command:`space overview`
    Provides you with an overview of the compute usage over time, as well as
    storage usage accounting, of all of the projects you own.
:command:`space project <project name>`
    Shows detailed compute and storage accounting for a specific project.
    For example, you can see how much compute and storage is used by each
    member of the project. All members of the project can run this command.

.. _jobs_with_project:

Submitting jobs under a project
-------------------------------

All projects are given an account that can be used to submit jobs belonging to
the project. The account name is the same as the project name, but lowercased.

Submitting jobs with the project account has the benefit that jobs submitted
with a project account get much higher priority than non-project jobs.

To submit a job with an account:

.. code-block:: console

    [fe1]$ sbatch --account <lowercase project name> ...

Managing a project
------------------

Project owners and project members with administrative rights can manage their
own projects through the following commands:

:command:`gm-request-project -g <project name> -m <members>`
    Request a new project folder with the given name and list of members.
:command:`gm-add-user -g <project name> -u <username>`
    Add a user to a project.
:command:`gm-remove-user  -g <project name> -u <username>`
    Remove a user from a project.
:command:`gm-grant-admin-rights-to-user -g <project name> -u <username>`
    Grant administrative rights to a user in a project.
:command:`gm-revoke-admin-rights-from-user -g <project name> -u <username>`
    Revoke a users' administrative rights to a project.
:command:`gm-list-admins <project name>`
    List all members of a project with administrative rights.
:command:`gm-list-members <project name>`
    List all members of a project.

To get help for any of the commands, run the command without any parameters.

Data access in project folders
------------------------------

All members can add, edit, and delete files in the project folder unless
restrictions have been set on specific files/subfolders. If you have data that
you want to keep private to your user, but that belongs to in the project
folder anyway, you can set permissions so that only you can read, write, and
execute the file with this command:

.. code-block:: console

    [fe1]$ chmod go-rwx <files>

The :command:`chmod` command changes file permissions. The first parameter
specifies that groups (g) and others (o) should have their read (r), write (w),
and execute (x) permissions removed (-). This means that it's only the owner of
the file who can now access it.

You can read more about :command:`chmod`
`here <https://en.wikipedia.org/wiki/Chmod>`_.

Backing up data
===============

We provide backup on good old-fashioned tape to all users. To back up a file,
it should be put in a directory called either :file:`BACKUP`, :file:`Backup` or
:file:`backup`. The directory can be located in any other directory.

Data is backed up approximately once per week.

.. warning::

    Do not back up temporary data files that can easily be reproduced.
    Computation is cheap, but backup is *very* expensive. The backup is meant
    for scripts/source code and important raw data.

Encrypting sensitive data
=========================

If you need to transfer sensitive data (for example human genomes) out of the
cluster you must encrypt the data first. Encrypting the data makes it
impossible for strangers to look at it without decrypting it, which requires
a password chosen by you.

Encrypt:

.. code-block:: console

    [fe1]$ openssl aes-256-cbc -a -salt -in data.txt -out data.txt.enc

This will encrypt :file:`data.txt` and write the encrypted data to
:file:`data.txt.enc`. You will be prompted for a password which is needed to
decrypt the file again.

Decrypt:

.. code-block:: console

    [fe1]$ openssl aes-256-cbc -d -a -in data.txt.enc -out data.txt.new

This will ask for the password used to encrypt the file. The decrypted contents
are written to :file:`data.txt.new`.
